#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json
import os
import sys

import streamlit as st
try:
    from prometheus_client import start_http_server
except Exception:  # pragma: no cover
    start_http_server = None  # type: ignore
import yaml
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Ensure project root is on sys.path so `src` can be imported when run via Streamlit
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../.."))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings
from src.app.core.parsing import extract_api_request as shared_extract_api_request
from src.app.orchestration.router import ToolRouter, ToolRequest
from src.app.orchestration.graph import execute_graph
from src.app.orchestration.types import OrchestrationContext
from src.app.core.audit import get_audit_logger
from src.app.alerts.engine import build_default_engine
from src.app.portfolio.aggregate import get_portfolio_snapshot, build_sunburst_data
from src.app.portfolio.equity import compute_equity_curve
from src.app.backtest.ui import store_backtest_result, render_backtest_export
from src.app.scanner.dsl import ScreenSpec, FilterSpec, SortSpec, run_screen
from src.app.core.normalize import normalize_iso8601
import re as _re


def create_system_prompt() -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ, –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–π API endpoint
2. –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: API_REQUEST: METHOD /path
3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
- GET /v1/instruments/{symbol}/quotes/latest - –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/bars - —Å–≤–µ—á–∏
- GET /v1/accounts/{account_id} - —Å—á–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
- GET /v1/accounts/{account_id}/orders - –æ—Ä–¥–µ—Ä–∞
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""


def extract_api_request(text: str) -> tuple[str | None, str | None]:
    # Delegate to shared util for consistency
    method, path = shared_extract_api_request(text)
    return method, path


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")
    # Start Prometheus exporter once
    try:
        if start_http_server and not st.session_state.get("_metrics_exporter_started"):
            port = int(os.getenv("METRICS_PORT", "8000"))
            start_http_server(port)
            st.session_state["_metrics_exporter_started"] = True
    except Exception:
        pass

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        # Backend –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)",
            )
            # Fallback: –∑–∞–≥—Ä—É–∑–∏–º –∏–∑ auth.json, –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ—Ç FINAM_ACCESS_TOKEN
            if not api_token and not os.getenv("FINAM_ACCESS_TOKEN"):
                try:
                    with open(os.path.join(PROJECT_ROOT, "auth.json"), encoding="utf-8") as _af:
                        _aj = json.load(_af)
                        _tok = (_aj or {}).get("token", "")
                        if _tok:
                            api_token = _tok
                            st.caption("Token: –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ auth.json")
                except Exception:
                    pass
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")
        backend = st.selectbox("Backend", options=["http", "mcp"], index=0, help="–°–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

        confirm_action = st.checkbox("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (POST/DELETE)", value=False)

        # –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ account_id + —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        account_id = st.session_state.get("_account_id_autofill", "")
        colAcc1, colAcc2 = st.columns([2,1])
        with colAcc1:
            if account_id:
                st.caption(f"ID —Å—á–µ—Ç–∞: {account_id}")
            else:
                st.caption("ID —Å—á–µ—Ç–∞: ‚Äî (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∂–µ)")
        with colAcc2:
            if st.button("–û–±–Ω–æ–≤–∏—Ç—å ID —Å—á—ë—Ç–∞"):
                # –í—ã–ø–æ–ª–Ω–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ finam_client –Ω–∏–∂–µ
                st.session_state["_refresh_account"] = True
        benchmark_symbol = st.text_input("–ë–µ–Ω—á–º–∞—Ä–∫ (—Å–∏–º–≤–æ–ª)", value="SBER@MISX", help="–ù–∞–ø—Ä.: SBER@MISX, LQDT@MISX, IMOEX@MISX, SBMX@MISX (ETF –Ω–∞ IMOEX), TMOS@MISX, FXRL@MISX")
        st.caption("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ 'Equity vs Benchmark'")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            # also clear backtest/scanner transient state
            for _k in [
                "_bt_metrics",
                "_bt_equity_fig",
                "_bt_trades",
                "_backtest_run",
                "_backtest_preset_name",
                "_run_custom_bt",
                "_custom_bt_cfg",
                "_portfolio_run",
            ]:
                st.session_state.pop(_k, None)
            st.rerun()

        st.markdown("---")
        st.subheader("üîî –ê–ª–µ—Ä—Ç—ã")
        alerts_backend = "http"  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º http –¥–ª—è –ø—Ä–æ–¥–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        bot_token_hint = os.getenv("TELEGRAM_BOT_TOKEN", "")
        st.caption(f"Telegram bot token: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if bot_token_hint else '–Ω–µ –∑–∞–¥–∞–Ω'}")
        colA1, colA2, colA3 = st.columns(3)
        with colA1:
            start_alerts = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã")
        with colA2:
            stop_alerts = st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã")
        with colA3:
            show_recent_alerts = st.button("üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

        if start_alerts:
            st.session_state["_alerts_engine"] = build_default_engine(backend=alerts_backend)
            try:
                cfg = st.session_state["_alerts_engine"].load_config("configs/alerts.yaml")
                st.session_state["_alerts_engine"].start(cfg)
                st.success("–ê–ª–µ—Ä—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã")
            except Exception as e:  # noqa: BLE001
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–ª–µ—Ä—Ç—ã: {e}")
        if stop_alerts and st.session_state.get("_alerts_engine"):
            try:
                st.session_state["_alerts_engine"].stop()
                st.success("–ê–ª–µ—Ä—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception:
                pass
        if show_recent_alerts:
            from src.app.core.audit import get_audit_logger as _gal
            with st.expander("üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞–ª–µ—Ä—Ç–æ–≤", expanded=True):
                st.json({"recent": _gal().recent(50)})

        st.caption("–ü–æ–¥–ø–∏—Å–∫–∞ TG: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ –±–æ—Ç–µ; –æ—Ç–ø–∏—Å–∫–∞ ‚Äî /stop. Deep‚Äëlinks –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –≤–µ–¥—É—Ç –≤ UI")

        st.markdown("---")
        st.subheader("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å")
        run_portfolio_btn = st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
        st.session_state["_portfolio_run"] = bool(run_portfolio_btn)

        st.markdown("---")
        st.subheader("üß™ –ë—ç–∫—Ç–µ—Å—Ç")
        # Backtest presets
        preset_names: list[str] = []
        try:
            with open("configs/strategies.yaml", encoding="utf-8") as f:
                strat_cfg = yaml.safe_load(f)
                preset_names = [s.get("name", f"preset_{i}") for i, s in enumerate(strat_cfg.get("strategies", []))]
        except Exception:
            strat_cfg = {"strategies": []}
        selected_preset = st.selectbox("–ë—ç–∫—Ç–µ—Å—Ç –ø—Ä–µ—Å–µ—Ç", options=["<none>"] + preset_names, index=0)
        run_backtest_preset = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç –ø—Ä–µ—Å–µ—Ç–∞")
        if run_backtest_preset and (not selected_preset or selected_preset == "<none>"):
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ")
            run_backtest_preset = False

        # Trigger actions and persist in session
        st.session_state["_benchmark_symbol"] = benchmark_symbol
        st.session_state["_backtest_preset_name"] = selected_preset if selected_preset != "<none>" else ""
        st.session_state["_backtest_run"] = run_backtest_preset

        # ‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ä–µ–¥–∞–∫—Ç–æ—Ä) ‚Äî –≤ —Å–∞–π–¥–±–∞—Ä–µ
        with st.expander("‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ä–µ–¥–∞–∫—Ç–æ—Ä)", expanded=False):
            cb_name = st.text_input("–ò–º—è –ø—Ä–µ—Å–µ—Ç–∞", value="custom_strategy")
            cb_symbol = st.text_input("–°–∏–º–≤–æ–ª", value="SBER@MISX")
            cb_timeframe = st.selectbox(
                "–¢–∞–π–º—Ñ—Ä–µ–π–º (–±—ç–∫-—Ç–µ—Å—Ç)",
                [
                    "TIME_FRAME_M1",
                    "TIME_FRAME_M5",
                    "TIME_FRAME_M15",
                    "TIME_FRAME_M30",
                    "TIME_FRAME_H1",
                    "TIME_FRAME_H4",
                    "TIME_FRAME_D",
                    "TIME_FRAME_W",
                    "TIME_FRAME_MN",
                ],
                index=6,
            )
            cb_start = st.text_input("–ù–∞—á–∞–ª–æ", value="–ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π")
            cb_end = st.text_input("–û–∫–æ–Ω—á–∞–Ω–∏–µ", value="—Å–µ–≥–æ–¥–Ω—è")
            try:
                _ns_cb = normalize_iso8601(cb_start)
                _ne_cb = normalize_iso8601(cb_end)
                st.caption(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∞—Ç: start={_ns_cb}, end={_ne_cb}")
            except Exception:
                pass

            colr1, colr2 = st.columns(2)
            with colr1:
                entry_type = st.selectbox("Entry rule", ["crossover", "threshold"], index=0)
                if entry_type == "crossover":
                    entry_fast = st.number_input("fast (EMA)", value=12, step=1)
                    entry_slow = st.number_input("slow (EMA)", value=26, step=1)
                    entry_params = {"fast": int(entry_fast), "slow": int(entry_slow)}
                else:
                    entry_ref = st.number_input("ref (–ø–æ—Ä–æ–≥)", value=0.0, step=1.0)
                    entry_params = {"ref": float(entry_ref)}
            with colr2:
                exit_type = st.selectbox("Exit rule", ["threshold"], index=0)
                exit_ref = st.number_input("ref (–ø–æ—Ä–æ–≥ –≤—ã—Ö–æ–¥–∞)", value=0.0, step=1.0)
                exit_params = {"ref": float(exit_ref)}

            colb1, colb2 = st.columns(2)
            with colb1:
                run_custom_bt = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç")
            with colb2:
                save_preset = st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–µ—Å–µ—Ç")

            if run_custom_bt:
                # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ; –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ router
                cfg_dict = {
                    "name": cb_name or f"{cb_symbol}_{cb_timeframe}",
                    "symbol": cb_symbol,
                    "timeframe": cb_timeframe,
                    "start": cb_start,
                    "end": cb_end,
                    "entry": {"type": entry_type, "params": entry_params},
                    "exit": {"type": exit_type, "params": exit_params},
                }
                st.session_state["_custom_bt_cfg"] = cfg_dict
                st.session_state["_run_custom_bt"] = True
                st.info("–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –Ω–∏–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

            if save_preset:
                try:
                    path_yaml = "configs/strategies.yaml"
                    try:
                        with open(path_yaml, encoding="utf-8") as f:
                            y = yaml.safe_load(f) or {}
                    except Exception:
                        y = {}
                    lst = y.get("strategies", [])
                    base_name = (cb_name or "").strip()
                    if not base_name or base_name.lower() == "custom_strategy":
                        auto_name = f"{cb_symbol}_{cb_timeframe}_E{entry_type}-{entry_params}_X{exit_type}-{exit_params}"
                    else:
                        auto_name = base_name
                    upd = {
                        "name": auto_name,
                        "symbol": cb_symbol,
                        "timeframe": cb_timeframe,
                        "start": cb_start,
                        "end": cb_end,
                        "entry": {"type": entry_type, "params": entry_params},
                        "exit": {"type": exit_type, "params": exit_params},
                    }
                    idx = next((i for i, s in enumerate(lst) if s.get("name") == auto_name), None)
                    if idx is None:
                        lst.append(upd)
                    else:
                        lst[idx] = upd
                    y["strategies"] = lst
                    with open(path_yaml, "w", encoding="utf-8") as f:
                        yaml.safe_dump(y, f, allow_unicode=True, sort_keys=False)
                    st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {path_yaml} –∫–∞–∫ '{auto_name}'")
                except Exception as e:  # noqa: BLE001
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç: {e}")
        st.markdown("---")
        st.subheader("üßÆ –°–∫–∞–Ω–µ—Ä")
        scanner_symbols = st.text_input("–°–∏–º–≤–æ–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value="SBER,GAZP", help="–ú–æ–∂–Ω–æ –±–µ–∑ —Ä—ã–Ω–∫–∞: SBER, GAZP; –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç API")
        scanner_timeframe = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º",
            options=[
                "TIME_FRAME_M1",
                "TIME_FRAME_M5",
                "TIME_FRAME_M15",
                "TIME_FRAME_M30",
                "TIME_FRAME_H1",
                "TIME_FRAME_H4",
                "TIME_FRAME_D",
                "TIME_FRAME_W",
                "TIME_FRAME_MN",
            ],
            index=6,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –±–∞—Ä–æ–≤"
        )
        scanner_start = st.text_input("–ù–∞—á–∞–ª–æ", value="–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è NL: '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π', 'YYYY-MM-DD', 'YYYY-MM-DD HH:MM'")
        scanner_end = st.text_input("–û–∫–æ–Ω—á–∞–Ω–∏–µ", value="—Å–µ–≥–æ–¥–Ω—è", help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è NL: '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π', ISO8601")
        try:
            _ns = normalize_iso8601(scanner_start)
            _ne = normalize_iso8601(scanner_end)
            st.caption(f"–ë—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫: start={_ns}, end={_ne}")
        except Exception:
            pass
        colf1, colf2, colf3 = st.columns(3)
        with colf1:
            scanner_min_growth = st.number_input("–ú–∏–Ω. —Ä–æ—Å—Ç, %", value=-100.0, step=1.0, help="0% –æ—Ç—Å–µ–∫–∞–µ—Ç –≤—Å–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é. –î–ª—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚â§ -100% –∏–ª–∏ –æ—Å–ª–∞–±—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä.")
        with colf2:
            scanner_min_volume = st.number_input("–ú–∏–Ω. –æ–±—ä—ë–º", value=0.0, step=1000.0)
        with colf3:
            scanner_require_short = st.checkbox("–¢–æ–ª—å–∫–æ —à–æ—Ä—Ç‚Äë–¥–æ—Å—Ç—É–ø–Ω—ã–µ", value=False)
        sort_key = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", options=["growth_pct", "total_volume"], index=0)
        run_scanner = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä")
        st.session_state["_scanner_run"] = run_scanner
        st.session_state["_scanner_spec"] = {
            "symbols": [s.strip() for s in scanner_symbols.split(",") if s.strip()],
            "timeframe": scanner_timeframe,
            "start": scanner_start,
            "end": scanner_end,
            "filters": [
                {"name": "min_growth_pct", "value": scanner_min_growth},
                {"name": "min_volume", "value": scanner_min_volume},
            ],
            "sorts": [{"key": sort_key, "descending": True}],
            "require_short": scanner_require_short,
            "account_id": account_id or None,
        }
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)
    router = ToolRouter(finam_client, backend=backend)
    audit = get_audit_logger()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ account_id: .env FINAM_ACCOUNT_ID -> /v1/sessions/details (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã)
        try:
            if not st.session_state.get("_account_id_autofill"):
                env_acc = os.getenv("FINAM_ACCOUNT_ID", "").strip()
                if env_acc:
                    st.session_state["_account_id_autofill"] = env_acc
                else:
                    details = finam_client.get_session_details() or {}
                    account_id_found = None
                    # 1) account_ids: ["..."]
                    accs = details.get("account_ids")
                    if isinstance(accs, list) and accs:
                        account_id_found = str(accs[0])
                    # 2) accounts: [ { id | accountId | account_id } ]
                    if not account_id_found:
                        acc_list = details.get("accounts") or details.get("data") or []
                        if isinstance(acc_list, list) and acc_list:
                            first = acc_list[0]
                            if isinstance(first, dict):
                                for k in ("id", "accountId", "account_id"):
                                    if first.get(k):
                                        account_id_found = str(first[k])
                                        break
                    # 3) single fields
                    if not account_id_found:
                        for k in ("id", "accountId", "account_id", "account"):
                            if details.get(k):
                                account_id_found = str(details[k])
                                break
                    if account_id_found:
                        st.session_state["_account_id_autofill"] = account_id_found
        except Exception:
            pass
    # –û–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ —Å–∫–∞–Ω–µ—Ä-—Å–ø–µ–∫—É –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    account_id = st.session_state.get("_account_id_autofill", "")
    # –í—ã–ø–æ–ª–Ω–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID —Å—á—ë—Ç–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –∫–Ω–æ–ø–∫–æ–π
    try:
        if st.session_state.get("_refresh_account") and finam_client.access_token:
            details = finam_client.get_session_details() or {}
            account_id_found = None
            accs = details.get("account_ids")
            if isinstance(accs, list) and accs:
                account_id_found = str(accs[0])
            if not account_id_found:
                acc_list = details.get("accounts") or details.get("data") or []
                if isinstance(acc_list, list) and acc_list:
                    first = acc_list[0]
                    if isinstance(first, dict):
                        for k in ("id", "accountId", "account_id"):
                            if first.get(k):
                                account_id_found = str(first[k])
                                break
            if not account_id_found:
                for k in ("id", "accountId", "account_id", "account"):
                    if details.get(k):
                        account_id_found = str(details[k])
                        break
            if account_id_found:
                st.session_state["_account_id_autofill"] = account_id_found
                account_id = account_id_found
                st.sidebar.success("ID —Å—á—ë—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω")
            else:
                st.sidebar.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Å—á—ë—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Å—Å–∏–∏")
                with st.sidebar.expander("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏", expanded=False):
                    st.json(details)
        st.session_state["_refresh_account"] = False
    except Exception:
        st.session_state["_refresh_account"] = False
    if st.session_state.get("_scanner_spec"):
        st.session_state["_scanner_spec"]["account_id"] = account_id or None

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if message["role"] == "assistant":
                st.markdown("---")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM (+ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å account_id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏)
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        if account_id:
            conversation_history.append({
                "role": "system",
                "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—á—ë—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π {account_id}. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è placeholder {'{account_id}'}, –ø–æ–¥—Å—Ç–∞–≤—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ."
            })
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = call_llm(conversation_history, temperature=0.3)
                assistant_message = response["choices"][0]["message"]["content"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å
                method, path = extract_api_request(assistant_message)

                api_data = None
                if method and path:
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º account_id –µ—Å–ª–∏ –µ—Å—Ç—å
                    if account_id and "{account_id}" in path:  # noqa: RUF027
                        path = path.replace("{account_id}", account_id)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                    st.info(f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é
                    ctx = OrchestrationContext(
                        dry_run=False,
                        account_id=account_id or None,
                        confirm=confirm_action,
                    )
                    result = execute_graph(assistant_message, router, ctx)
                    api_response = result.data if result.data is not None else {}
                    if result.api:
                        api_data = {"method": result.api.get("method"), "path": result.api.get("path"), "response": api_response}
                    if result.requires_confirmation:
                        st.warning(result.message or "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
                        with st.expander("üßæ Safety trace", expanded=False):
                            st.json({"recent": audit.recent(20)})
                    # Wise orders insights
                    if result.insights or result.suggestions:
                        with st.expander("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é (Wise Orders)", expanded=False):
                            if result.insights:
                                st.json(result.insights)
                            if result.suggestions:
                                st.info(result.suggestions)
                    if result.trace:
                        with st.expander("‚è±Ô∏è Trace", expanded=False):
                            import os as _os
                            env_info = {
                                "OPENROUTER_API_KEY": "set" if bool(_os.getenv("OPENROUTER_API_KEY")) else "unset",
                                "FINAM_ACCESS_TOKEN": "set" if bool(_os.getenv("FINAM_ACCESS_TOKEN")) else "unset",
                                "FINAM_API_BASE_URL": _os.getenv("FINAM_API_BASE_URL", "") or "https://api.finam.ru",
                            }
                            st.json({"trace": result.trace, "env": env_info})

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    if "error" in api_response:
                        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {api_response.get('error')}")
                        if "details" in api_response:
                            st.error(f"–î–µ—Ç–∞–ª–∏: {api_response['details']}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    with st.expander("üì° –û—Ç–≤–µ—Ç API", expanded=False):
                        st.json(api_response)

                    # –ê–≤—Ç–æ‚Äë–≥—Ä–∞—Ñ–∏–∫ –ø–æ —Å–∏–º–≤–æ–ª—É (—Å–≤–µ—á–∏ + –æ–±—ä—ë–º) –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                    try:
                        if result.api and isinstance(result.api.get("path"), str):
                            m = _re.search(r"/v1/instruments/([^/]+)/", result.api.get("path", ""))
                            if m:
                                sym = m.group(1)
                                start_iso = normalize_iso8601("–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
                                end_iso = normalize_iso8601("—Å–µ–≥–æ–¥–Ω—è")
                                bars_path = f"/v1/instruments/{sym}/bars?timeframe=TIME_FRAME_D&interval.start_time={start_iso}&interval.end_time={end_iso}"
                                raw_bars = router.execute(ToolRequest(method="GET", path=bars_path))
                                # normalize bars list
                                bars = []
                                if isinstance(raw_bars, list):
                                    bars = raw_bars
                                elif isinstance(raw_bars, dict):
                                    for key in ("bars", "candles", "data", "items", "result"):
                                        v = raw_bars.get(key)
                                        if isinstance(v, list):
                                            bars = v
                                            break
                                if bars:
                                    def _num(x: object) -> float:
                                        try:
                                            if isinstance(x, dict):
                                                x = x.get("value")
                                            return float(x) if x is not None else 0.0
                                        except Exception:
                                            return 0.0
                                    opens = [_num(b.get("open") or b.get("o")) for b in bars]
                                    highs = [_num(b.get("high") or b.get("h")) for b in bars]
                                    lows = [_num(b.get("low") or b.get("l")) for b in bars]
                                    closes = [_num(b.get("close") or b.get("c") or b.get("price")) for b in bars]
                                    volumes = [_num(b.get("volume") or b.get("v")) for b in bars]
                                    times_b = [str(b.get("time") or b.get("timestamp") or b.get("date")) for b in bars]
                                    fig_q = make_subplots(rows=1, cols=1, specs=[[{"secondary_y": True}]])
                                    fig_q.add_trace(
                                        go.Candlestick(x=times_b, open=opens, high=highs, low=lows, close=closes, name="Price"),
                                        secondary_y=False,
                                    )
                                    fig_q.add_trace(
                                        go.Bar(x=times_b, y=volumes, name="Volume", marker_color="#aaa", opacity=0.3),
                                        secondary_y=True,
                                    )
                                    fig_q.update_yaxes(title_text="Price", secondary_y=False)
                                    fig_q.update_yaxes(title_text="Volume", secondary_y=True)
                                    fig_q.update_layout(height=360, margin=dict(l=10, r=10, t=20, b=10))
                                    with st.expander("üìà –ì—Ä–∞—Ñ–∏–∫ (30 –¥–Ω–µ–π)", expanded=False):
                                        st.plotly_chart(fig_q, use_container_width=True)
                    except Exception:
                        pass

                    api_data = {"method": method, "path": path, "response": api_response}

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    conversation_history.append({"role": "assistant", "content": assistant_message})
                    conversation_history.append({
                        "role": "user",
                        "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.",
                    })

                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                    response = call_llm(conversation_history, temperature=0.3)
                    assistant_message = response["choices"][0]["message"]["content"]

                st.markdown(assistant_message)
                st.markdown("---")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message_data = {"role": "assistant", "content": assistant_message}
                if api_data:
                    message_data["api_request"] = api_data
                st.session_state.messages.append(message_data)

                # Safety trace –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
                with st.expander("üßæ Safety trace", expanded=False):
                    st.json({"recent": audit.recent(20)})

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # Render portfolio report if requested
    try:
        if st.session_state.get("_portfolio_run") and account_id:
            st.markdown("## üß∫ –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
            snap = get_portfolio_snapshot(router, account_id)  # type: ignore[arg-type]
            fig_sb: object | None = None
            fig_eq: object | None = None
            # Single pie: positions + cash
            pos_nz = [p for p in (snap.positions or []) if (p.market_value or 0) > 0]
            labels = [p.symbol for p in pos_nz]
            values = [p.market_value for p in pos_nz]
            cash_total = sum(snap.cash.values()) if snap.cash else 0.0
            if cash_total > 0:
                labels.append("CASH")
                values.append(cash_total)
            if labels and sum(values) > 0:
                fig_pie = go.Figure(go.Pie(labels=labels, values=values, hole=0.3, name="Portfolio"))
                st.plotly_chart(fig_pie, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã (–ø–æ–∑–∏—Ü–∏–∏/–∫—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç).")

            # Benchmark normalized line (last 60 days)
            start_iso = normalize_iso8601("–ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –¥–Ω–µ–π")
            end_iso = normalize_iso8601("—Å–µ–≥–æ–¥–Ω—è")
            bench_sym_input = st.session_state.get("_benchmark_symbol") or "IMOEX@MISX"
            bench_change_pct: float | None = None
            # –ü–æ–¥–±–æ—Ä –±–µ–Ω—á–º–∞—Ä–∫–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞, –µ—Å–ª–∏ –¥–Ω–µ–≤–Ω—ã–µ –±–∞—Ä—ã –ø—É—Å—Ç—ã
            # Build candidate list (deduplicated, order‚Äëpreserving)
            raw_candidates = [bench_sym_input, "SBER@MISX", "LQDT@MISX"]
            env_bench = os.getenv("DEFAULT_BENCHMARK_SYMBOLS", "")
            raw_candidates += [s.strip() for s in env_bench.split(",") if s.strip()]
            raw_candidates += ["IMOEX@MISX", "MOEX@MISX", "IMOEX", "SBMX@MISX", "TMOS@MISX", "FXRL@MISX"]
            seen: set[str] = set()
            candidates: list[str] = []
            for c in raw_candidates:
                if c and c not in seen:
                    candidates.append(c)
                    seen.add(c)
            picked_sym = None
            xs_bm, ys_bm, o_bm, h_bm, l_bm, c_bm = [], [], [], [], [], []
            bm_try_paths: list[str] = []

            # Helper to normalize bars list from various shapes
            def _bars_list(raw: object) -> list:
                if isinstance(raw, list):
                    return raw
                if isinstance(raw, dict):
                    for k in ("bars", "candles", "data", "items", "result"):
                        v = raw.get(k)  # type: ignore[call-arg]
                        if isinstance(v, list):
                            return v
                return []
            for sym in candidates:
                for tf in ("TIME_FRAME_D", "TIME_FRAME_W", "TIME_FRAME_MN"):
                    try:
                        # Try instruments path first
                        path_bm = f"/v1/instruments/{sym}/bars?timeframe={tf}&interval.start_time={start_iso}&interval.end_time={end_iso}"
                        bm_try_paths.append(path_bm)
                        raw_bm = router.execute(ToolRequest(method="GET", path=path_bm))
                        bm_bars = _bars_list(raw_bm)
                        xs_bm, ys_bm, o_bm, h_bm, l_bm, c_bm = [], [], [], [], [], []
                        for b in bm_bars:
                            t = str(b.get("time") or b.get("timestamp") or b.get("date"))
                            c = b.get("close") or b.get("c") or b.get("price")
                            try:
                                ys_bm.append(float(c)); xs_bm.append(t)
                                o_bm.append(float(b.get("open") or b.get("o") or c))
                                h_bm.append(float(b.get("high") or b.get("h") or c))
                                l_bm.append(float(b.get("low") or b.get("l") or c))
                                c_bm.append(float(c))
                            except Exception:
                                continue
                        if ys_bm:
                            picked_sym = f"{sym}"
                            break
                        # If empty, try assets path variant
                        path_bm2 = f"/v1/assets/{sym}/bars?timeframe={tf}&interval.start_time={start_iso}&interval.end_time={end_iso}"
                        bm_try_paths.append(path_bm2)
                        raw_bm2 = router.execute(ToolRequest(method="GET", path=path_bm2))
                        bm_bars2 = _bars_list(raw_bm2)
                        xs_bm, ys_bm, o_bm, h_bm, l_bm, c_bm = [], [], [], [], [], []
                        for b in bm_bars2:
                            t = str(b.get("time") or b.get("timestamp") or b.get("date"))
                            c = b.get("close") or b.get("c") or b.get("price")
                            try:
                                ys_bm.append(float(c)); xs_bm.append(t)
                                o_bm.append(float(b.get("open") or b.get("o") or c))
                                h_bm.append(float(b.get("high") or b.get("h") or c))
                                l_bm.append(float(b.get("low") or b.get("l") or c))
                                c_bm.append(float(c))
                            except Exception:
                                continue
                        if ys_bm:
                            picked_sym = f"{sym}"
                            break
                    except Exception:
                        continue
                if picked_sym:
                    break
            if ys_bm:
                try:
                    bench_change_pct = (ys_bm[-1] - ys_bm[0]) / ys_bm[0] * 100.0
                except Exception:
                    bench_change_pct = None
                st.subheader(f"–ë–µ–Ω—á–º–∞—Ä–∫: {picked_sym or bench_sym_input} {('+' if (bench_change_pct or 0)>=0 else '')}{(bench_change_pct or 0):.1f}% –∑–∞ 60–¥")
                if c_bm and o_bm and h_bm and l_bm:
                    fig_bm_c = make_subplots(rows=1, cols=1, specs=[[{"secondary_y": False}]])
                    fig_bm_c.add_trace(go.Candlestick(x=xs_bm, open=o_bm, high=h_bm, low=l_bm, close=c_bm, name=f"{picked_sym or bench_sym_input}"))
                    fig_bm_c.update_layout(height=300, margin=dict(l=10, r=10, t=20, b=10))
                    st.plotly_chart(fig_bm_c, use_container_width=True)
                base = ys_bm[0]
                yn = [v / base * 100.0 for v in ys_bm]
                fig_bm = go.Figure(go.Scatter(x=xs_bm, y=yn, name=f"{picked_sym or bench_sym_input} (–Ω–æ—Ä–º=100)"))
                fig_bm.update_layout(height=300, margin=dict(l=10, r=10, t=20, b=10))
                st.plotly_chart(fig_bm, use_container_width=True)
                fig_eq = fig_bm
            else:
                # –Ø–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–µ–Ω—á–º–∞—Ä–∫—É + –ø–æ–ø—ã—Ç–∫–∏
                st.caption(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–∞—Ä–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {', '.join(candidates)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª.")
                with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞", expanded=False):
                    for p in bm_try_paths[:6]:
                        st.code(f"GET {p}")

            # OHLCV per asset (up to 6)
            def _num(x: object) -> float:
                try:
                    if isinstance(x, dict):
                        x = x.get("value")
                    return float(x) if x is not None else 0.0
                except Exception:
                    return 0.0

            for p in pos_nz[:6]:
                try:
                    path_bars = f"/v1/instruments/{p.symbol}/bars?timeframe=TIME_FRAME_D&interval.start_time={start_iso}&interval.end_time={end_iso}"
                    raw_bars = router.execute(ToolRequest(method="GET", path=path_bars))
                    bars = _bars_list(raw_bars)
                    if not bars:
                        # try assets path variant
                        path_bars2 = f"/v1/assets/{p.symbol}/bars?timeframe=TIME_FRAME_D&interval.start_time={start_iso}&interval.end_time={end_iso}"
                        raw_bars2 = router.execute(ToolRequest(method="GET", path=path_bars2))
                        bars = _bars_list(raw_bars2)
                    if not bars:
                        continue
                    opens = [_num(b.get("open") or b.get("o")) for b in bars]
                    highs = [_num(b.get("high") or b.get("h")) for b in bars]
                    lows = [_num(b.get("low") or b.get("l")) for b in bars]
                    closes = [_num(b.get("close") or b.get("c") or b.get("price")) for b in bars]
                    volumes = [_num(b.get("volume") or b.get("v")) for b in bars]
                    times_b = [str(b.get("time") or b.get("timestamp") or b.get("date")) for b in bars]
                    fig_q = make_subplots(rows=1, cols=1, specs=[[{"secondary_y": True}]])
                    fig_q.add_trace(go.Candlestick(x=times_b, open=opens, high=highs, low=lows, close=closes, name=f"{p.symbol}"), secondary_y=False)
                    fig_q.add_trace(go.Bar(x=times_b, y=volumes, name="Volume", marker_color="#aaa", opacity=0.3), secondary_y=True)
                    fig_q.update_yaxes(title_text="Price", secondary_y=False)
                    fig_q.update_yaxes(title_text="Volume", secondary_y=True)
                    fig_q.update_layout(height=360, margin=dict(l=10, r=10, t=20, b=10))
                    st.plotly_chart(fig_q, use_container_width=True)
                except Exception:
                    continue

            # Diagnostics + LLM –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
            try:
                total_mv = sum(values) if values else 0.0
                diag_positions = [
                    {"symbol": p.symbol, "market_value": round(p.market_value, 2)} for p in pos_nz
                ]
                diag = {
                    "equity_est": round((total_mv + cash_total), 2),
                    "cash_total": round(cash_total, 2),
                    "positions": diag_positions,
                }
                with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è", expanded=True):
                    st.json(diag)

                # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç —á–µ—Ä–µ–∑ LLM: –∫–æ—Ä–æ—Ç–∫–æ –∏ —Å —á–∏—Å–ª–∞–º–∏/—Å–∏–º–≤–æ–ª–∞–º–∏
                try:
                    weights = [(p['symbol'], round((p['market_value']/(total_mv or 1))*100, 1)) for p in diag_positions]
                    weights_sorted = sorted(weights, key=lambda x: x[1], reverse=True)
                    weights_str = ", ".join(f"{sym}: {pct}%" for sym, pct in weights_sorted)
                    top_sym = weights_sorted[0][0] if weights_sorted else "‚Äî"
                    cash_pct = round((cash_total/(((total_mv or 0)+cash_total) or 1))*100, 1)
                    bench_ctx = f"–ë–µ–Ω—á–º–∞—Ä–∫ {picked_sym or bench_sym_input}: {('+' if (bench_change_pct or 0)>=0 else '')}{(bench_change_pct or 0):.1f}% –∑–∞ 60–¥" if bench_change_pct is not None else f"–ë–µ–Ω—á–º–∞—Ä–∫ {picked_sym or bench_sym_input}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    prompt_advice = (
                        "–î–∞–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –±–µ–Ω—á–º–∞—Ä–∫. –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
                        "–ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑; —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã/–¥–æ–ª–∏/–∫—ç—à –ø–æ –º–µ—Ä–µ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –§–æ—Ä–º–∞—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π, –±–µ–∑ –ø—Ä–µ–∞–º–±—É–ª—ã.\n\n"
                        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {bench_ctx}. –ü–æ–∑–∏—Ü–∏–∏: {weights_str or '‚Äî'}. –ö—ç—à: {cash_pct}%. –¢–æ–ø: {top_sym}."
                    )
                    resp = call_llm([{"role": "user", "content": prompt_advice}], temperature=0.2)
                    advice = resp["choices"][0]["message"]["content"].strip()
                    if advice:
                        st.success(advice)
                        with st.expander("LLM —Å–æ–≤–µ—Ç (trace)", expanded=False):
                            st.markdown("–ü—Ä–æ–º–ø—Ç:")
                            st.code(prompt_advice)
                            st.markdown("–û—Ç–≤–µ—Ç:")
                            st.write(advice)
                except Exception:
                    pass
            except Exception:
                pass

            # (—É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –æ–∫–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)

            # Export buttons
            export_dir = "reports"
            os.makedirs(export_dir, exist_ok=True)
            col1, col2 = st.columns(2)
            with col1:
                if fig_sb is not None and st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Sunburst (HTML)"):
                    fig_sb.write_html(os.path.join(export_dir, "portfolio_sunburst.html"))
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: reports/portfolio_sunburst.html")
            with col2:
                if fig_eq is not None and st.button("üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Equity (PNG)"):
                    fig_eq.write_image(os.path.join(export_dir, "portfolio_equity.png"))
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: reports/portfolio_equity.png")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try:
            details = finam_client.get_session_details()
        except Exception:
            details = {}
        with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è", expanded=True):
            st.json({
                "account_id": account_id,
                "session_details_preview": details,
            })

    # Run backtest preset if requested
    try:
        if st.session_state.get("_backtest_run") and st.session_state.get("_backtest_preset_name"):
            st.markdown("## üß™ –ë—ç–∫—Ç–µ—Å—Ç (–ø—Ä–µ—Å–µ—Ç)")
            name = st.session_state.get("_backtest_preset_name")
            # find preset
            cfg_list = (strat_cfg or {}).get("strategies", [])
            preset = next((s for s in cfg_list if s.get("name") == name), None)
            if preset:
                from src.app.backtest.dsl import parse_strategy
                from src.app.backtest.executor import run_backtest

                strat = parse_strategy(preset)
                res = run_backtest(router, strat)
                if res.metrics.get("error"):
                    st.error("–ù–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞")
                    with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", expanded=True):
                        st.json(res.metrics)
                    return
                # Compact metrics formatting
                mp = {
                    "final_equity": round(res.metrics.get("final_equity", 0.0), 2),
                    "return_pct": f"{res.metrics.get('return_pct', 0.0):.2f}%",
                    "max_drawdown_pct": f"{res.metrics.get('max_drawdown_pct', 0.0):.2f}%",
                }
                st.json(mp)
                fig_bt = store_backtest_result(
                    res.metrics,
                    res.equity_curve,
                    res.times,
                    res.closes,
                    res.trades,
                    res.opens,
                    res.highs,
                    res.lows,
                    res.volumes,
                )
                st.plotly_chart(fig_bt, use_container_width=True)
                st.session_state["_bt_trades"] = res.trades
            else:
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

        # Execute deferred custom backtest (from sidebar), after router is ready
        if st.session_state.get("_run_custom_bt") and st.session_state.get("_custom_bt_cfg"):
            st.markdown("## üß™ –ë—ç–∫—Ç–µ—Å—Ç (–∫–∞—Å—Ç–æ–º)")
            try:
                from src.app.backtest.dsl import parse_strategy
                from src.app.backtest.executor import run_backtest

                cfg_dict = st.session_state.get("_custom_bt_cfg")
                strat = parse_strategy(cfg_dict)
                res = run_backtest(router, strat)
                if res.metrics.get("error"):
                    st.error("–ù–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", expanded=True):
                        st.json(res.metrics)
                else:
                    mp2 = {
                        "final_equity": round(res.metrics.get("final_equity", 0.0), 2),
                        "return_pct": f"{res.metrics.get('return_pct', 0.0):.2f}%",
                        "max_drawdown_pct": f"{res.metrics.get('max_drawdown_pct', 0.0):.2f}%",
                    }
                    st.json(mp2)
                    fig_bt2 = store_backtest_result(
                        res.metrics,
                        res.equity_curve,
                        res.times,
                        res.closes,
                        res.trades,
                        res.opens,
                        res.highs,
                        res.lows,
                        res.volumes,
                    )
                    st.plotly_chart(fig_bt2, use_container_width=True)
                    st.session_state["_bt_trades"] = res.trades
                st.session_state["_run_custom_bt"] = False
            except Exception as e:  # noqa: BLE001
                st.error(f"–û—à–∏–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

    # Unified export section for last backtest result
    try:
        from src.app.backtest.ui import render_backtest_export as _render_bt
        trades = st.session_state.get("_bt_trades")
        _render_bt(trades)
    except Exception:
        pass

    # Run scanner if requested
    try:
        if st.session_state.get("_scanner_run"):
            st.markdown("## üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞")
            ss = st.session_state.get("_scanner_spec") or {}
            # Normalize simple tickers to market symbols (SBER -> SBER@MISX)
            from src.app.core.normalize import infer_market_symbol as _infer_market_symbol
            _raw_syms = ss.get("symbols", ["SBER", "GAZP"]) or []
            _norm_syms = [_infer_market_symbol(s) for s in _raw_syms]

            spec = ScreenSpec(
                symbols=_norm_syms,
                timeframe=ss.get("timeframe", "TIME_FRAME_D"),
                start=ss.get("start", "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"),
                end=ss.get("end", "—Å–µ–≥–æ–¥–Ω—è"),
                filters=[FilterSpec(**f) for f in ss.get("filters", [])],
                sorts=[SortSpec(**s) for s in ss.get("sorts", [])],
                require_short=bool(ss.get("require_short", False)),
                account_id=ss.get("account_id"),
            )
            results, meta = run_screen(router, spec, page=1, page_size=100)
            # Table
            import pandas as pd
            if results:
                def _fmt_int(v: object) -> str:
                    try:
                        x = float(v)
                        return f"{int(x):,}".replace(",", " ")
                    except Exception:
                        return "‚Äî"

                def _fmt_pct(v: object) -> str:
                    try:
                        return f"{float(v):.2f}%"
                    except Exception:
                        return "‚Äî"

                df_display = pd.DataFrame([
                    {
                        "symbol": r.symbol,
                        "growth %": _fmt_pct(r.growth_pct),
                        "volume": _fmt_int(r.total_volume),
                    }
                    for r in results
                ])
                st.dataframe(df_display, use_container_width=True)
                # OHLCV candlesticks per result (limit for UI)
                try:
                    from plotly.subplots import make_subplots as _make_subplots
                    import plotly.graph_objects as _go
                    start_iso = normalize_iso8601(spec.start)
                    end_iso = normalize_iso8601(spec.end)
                    shown = 0
                    for r in results:
                        if shown >= 6:
                            break
                        try:
                            path_bars = f"/v1/instruments/{r.symbol}/bars?timeframe={spec.timeframe}&interval.start_time={start_iso}&interval.end_time={end_iso}"
                            raw_bars = router.execute(ToolRequest(method="GET", path=path_bars))
                            bars = []
                            if isinstance(raw_bars, list):
                                bars = raw_bars
                            elif isinstance(raw_bars, dict):
                                for key in ("bars", "candles", "data", "items", "result"):
                                    v = raw_bars.get(key)
                                    if isinstance(v, list):
                                        bars = v
                                        break
                            if not bars:
                                # try assets path
                                path_bars2 = f"/v1/assets/{r.symbol}/bars?timeframe={spec.timeframe}&interval.start_time={start_iso}&interval.end_time={end_iso}"
                                raw_bars2 = router.execute(ToolRequest(method="GET", path=path_bars2))
                                if isinstance(raw_bars2, list):
                                    bars = raw_bars2
                                elif isinstance(raw_bars2, dict):
                                    for key in ("bars", "candles", "data", "items", "result"):
                                        v = raw_bars2.get(key)
                                        if isinstance(v, list):
                                            bars = v
                                            break
                            if not bars:
                                continue
                            def _num(x: object) -> float:
                                try:
                                    if isinstance(x, dict):
                                        x = x.get("value")
                                    return float(x) if x is not None else 0.0
                                except Exception:
                                    return 0.0
                            opens = [_num(b.get("open") or b.get("o")) for b in bars]
                            highs = [_num(b.get("high") or b.get("h")) for b in bars]
                            lows = [_num(b.get("low") or b.get("l")) for b in bars]
                            closes = [_num(b.get("close") or b.get("c") or b.get("price")) for b in bars]
                            volumes = [_num(b.get("volume") or b.get("v")) for b in bars]
                            times_b = [str(b.get("time") or b.get("timestamp") or b.get("date")) for b in bars]
                            fig_q = _make_subplots(rows=1, cols=1, specs=[[{"secondary_y": True}]])
                            fig_q.add_trace(_go.Candlestick(x=times_b, open=opens, high=highs, low=lows, close=closes, name=f"{r.symbol}"), secondary_y=False)
                            fig_q.add_trace(_go.Bar(x=times_b, y=volumes, name="Volume", marker_color="#aaa", opacity=0.3), secondary_y=True)
                            fig_q.update_yaxes(title_text="Price", secondary_y=False)
                            fig_q.update_yaxes(title_text="Volume", secondary_y=True)
                            fig_q.update_layout(height=360, margin=dict(l=10, r=10, t=20, b=10))
                            st.plotly_chart(fig_q, use_container_width=True)
                            shown += 1
                        except Exception:
                            continue
                except Exception:
                    pass
                # Short LLM summary based on table (symbols, growth %, volume)
                try:
                    rows_ctx = []
                    for r in results[:8]:
                        g = r.growth_pct if r.growth_pct is not None else 0.0
                        v = r.total_volume if r.total_volume is not None else 0.0
                        rows_ctx.append({"symbol": r.symbol, "growth_pct": round(float(g), 2), "volume": float(v)})
                    if rows_ctx:
                        # Compose compact context string
                        ctx_str = ", ".join(
                            f"{row['symbol']}: {row['growth_pct']:+.2f}% vol {int(row['volume']):,}".replace(",", " ")
                            for row in rows_ctx
                        )
                        prompt_scan = (
                            "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞. –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–∫–∞–Ω–µ—Ä–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –≤—ã–≤–æ–¥ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏. "
                            "–ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É.\n\n"
                            f"–î–∞–Ω–Ω—ã–µ: {ctx_str}."
                        )
                        resp = call_llm([{"role": "user", "content": prompt_scan}], temperature=0.2)
                        advice = resp["choices"][0]["message"]["content"].strip()
                        if advice:
                            st.success(advice)
                            with st.expander("LLM –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Å–∫–∞–Ω–µ—Ä)", expanded=False):
                                st.markdown("–ü—Ä–æ–º–ø—Ç:")
                                st.code(prompt_scan)
                                st.markdown("–û—Ç–≤–µ—Ç:")
                                st.write(advice)
                except Exception:
                    pass
            else:
                st.info("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥/—É–Ω–∏–≤–µ—Ä—Å.")
                with st.expander("‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", expanded=True):
                    try:
                        _ns = normalize_iso8601(spec.start)
                        _ne = normalize_iso8601(spec.end)
                    except Exception:
                        _ns = spec.start
                        _ne = spec.end
                    st.json({
                        "symbols": spec.symbols,
                        "timeframe": spec.timeframe,
                        "start": spec.start,
                        "end": spec.end,
                        "normalized": {"start": _ns, "end": _ne},
                        "filters": [f.__dict__ for f in spec.filters],
                        "account_id": spec.account_id,
                    })
                    # Low-noise raw probe for first symbol
                    try:
                        if spec.symbols:
                            sym0 = spec.symbols[0]
                            path0 = f"/v1/instruments/{sym0}/bars?timeframe={spec.timeframe}&interval.start_time={_ns}&interval.end_time={_ne}"
                            raw = router.execute(ToolRequest(method="GET", path=path0))
                            preview = raw[:3] if isinstance(raw, list) else (raw.get("bars") or raw.get("data") or raw)
                            st.code(f"GET {path0}")
                            st.json({"raw_type": str(type(raw)), "preview": preview})
                    except Exception as _e:  # noqa: BLE001
                        st.warning(f"Raw probe error: {_e}")
            if st.button("üìÑ Export CSV (scanner)"):
                os.makedirs("reports", exist_ok=True)
                csv_path = "reports/scanner_results.csv"
                try:
                    # export the displayed dataframe
                    if 'df_display' in locals():
                        df_display.to_csv(csv_path, index=False)
                        st.success(csv_path)
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                except Exception:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞: {e}")


if __name__ == "__main__":
    main()
